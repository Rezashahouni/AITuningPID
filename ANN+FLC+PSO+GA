import matplotlib.pyplot as plt
import numpy as np
from sklearn.neural_network import MLPRegressor
from pyswarm import pso
import skfuzzy as fuzz
from skfuzzy import control as ctrl
from geneticalgorithm import geneticalgorithm as ga
import networkx as nx  # Ensure networkx is installed

class PIDController:
    def __init__(self, Kp, Ki, Kd, setpoint):
        self.Kp = Kp
        self.Ki = Ki
        self.Kd = Kd
        self.setpoint = setpoint
        self.integral = 0
        self.previous_error = 0

    def update(self, process_variable, dt):
        error = self.setpoint - process_variable
        self.integral += error * dt
        derivative = (error - self.previous_error) / dt
        output = self.Kp * error + self.Ki * self.integral + self.Kd * derivative
        self.previous_error = error
        return output

# Simulation parameters
time = np.linspace(0, 10, 1000)  # 10 seconds, 1000 points
dt = time[1] - time[0]
setpoint = 5.0  # Desired setpoint

# Define setpoints at different time intervals
setpoints = np.piecewise(time, [time < 10, (time >= 10) & (time < 20), time >= 20], [8.0, 10.0, 7.5])

# Initialize PID controller with dummy values
pid = PIDController(1.0, 0.1, 0.05, setpoint)

# Process variables
process_variable = 0.0
process_values = []
setpoints = []


# ANN for PID tuning with 2 hidden layers, using MSE as the loss function and Adam optimizer
ann = MLPRegressor(hidden_layer_sizes=(10, 10), max_iter=1000, solver='adam', alpha=0.0001)


# PSO for PID tuning
def objective(params):
    Kp, Ki, Kd = params
    pid = PIDController(Kp, Ki, Kd, setpoint)
    process_variable = 0.0
    total_error = 0.0
    for t in time:
        control_signal = pid.update(process_variable, dt)
        process_variable += control_signal * dt
        total_error += abs(setpoint - process_variable)
        if t > 1.5 and abs(setpoint - process_variable) > 0.05 * setpoint:
            total_error += 1000  # Penalize if not settled within 1.5 seconds
    return total_error


# Initial guess and bounds for PSO
initial_guess = [1.0, 0.1, 0.05]
bounds = ([0, 0, 0], [10, 1, 1])

# Optimize PID parameters using PSO
optimal_params, _ = pso(objective, bounds[0], bounds[1], swarmsize=50, maxiter=100)
Kp_opt, Ki_opt, Kd_opt = optimal_params

# GA parameters
varbound = np.array([[0, 10], [0, 1], [0, 1]])
algorithm_param = {'max_num_iteration': 100, 'population_size': 50, 'mutation_probability': 0.1, 'elit_ratio': 0.01, 'crossover_probability': 0.5, 'parents_portion': 0.3, 'crossover_type': 'uniform', 'max_iteration_without_improv': None}

model = ga(function=objective, dimension=3, variable_type='real', variable_boundaries=varbound, algorithm_parameters=algorithm_param)
model.run()


# FLC setup
error = ctrl.Antecedent(np.arange(-10, 10, 0.1), 'error')
delta_error = ctrl.Antecedent(np.arange(-10, 10, 0.1), 'delta_error')
Kp = ctrl.Consequent(np.arange(0, 10, 0.1), 'Kp')
Ki = ctrl.Consequent(np.arange(0, 1, 0.01), 'Ki')
Kd = ctrl.Consequent(np.arange(0, 1, 0.01), 'Kd')

# Membership functions
error.automf(3)
delta_error.automf(3)
Kp.automf(3)
Ki.automf(3)
Kd.automf(3)

# Fuzzy rules
rule1 = ctrl.Rule(error['poor'] & delta_error['poor'], (Kp['good'], Ki['good'], Kd['good']))
rule2 = ctrl.Rule(error['average'] & delta_error['average'], (Kp['average'], Ki['average'], Kd['average']))
rule3 = ctrl.Rule(error['good'] & delta_error['good'], (Kp['poor'], Ki['poor'], Kd['poor']))

# Control system
pid_ctrl = ctrl.ControlSystem([rule1, rule2, rule3])
pid_sim = ctrl.ControlSystemSimulation(pid_ctrl)

# GA for optimizing FLC
def flc_objective(params):
    Kp_opt, Ki_opt, Kd_opt = params
    pid = PIDController(Kp_opt, Ki_opt, Kd_opt, setpoint)
    process_variable = 0.0
    total_error = 0.0
    for t in time:
        pid_sim.input['error'] = setpoint - process_variable
        pid_sim.input['delta_error'] = (setpoint - process_variable) - pid.previous_error
        pid_sim.compute()
        pid.Kp = pid_sim.output['Kp']
        pid.Ki = pid_sim.output['Ki']
        pid.Kd = pid_sim.output['Kd']
        control_signal = pid.update(process_variable, dt)
        process_variable += control_signal * dt
        total_error += abs(setpoint - process_variable)
    return total_error

# GA parameters
varbound = np.array([[0, 10], [0, 1], [0, 1]])
algorithm_param = {'max_num_iteration': 100, 'population_size': 50, 'mutation_probability': 0.1, 'elit_ratio': 0.01, 'crossover_probability': 0.5, 'parents_portion': 0.3, 'crossover_type': 'uniform', 'max_iteration_without_improv': None}

model = ga(function=flc_objective, dimension=3, variable_type='real', variable_boundaries=varbound, algorithm_parameters=algorithm_param)
model.run()

# Get optimized parameters
Kp_opt, Ki_opt, Kd_opt = model.output_dict['variable']

# Initialize process variable and lists
process_variable = 0.0
process_values = []
setpoints = []

# Update PID controller with optimized parameters
pid = PIDController(Kp_opt, Ki_opt, Kd_opt, setpoint)

# Simulation loop with optimized PID
for t in time:
    pid_sim.input['error'] = setpoint - process_variable
    pid_sim.input['delta_error'] = (setpoint - process_variable) - pid.previous_error
    pid_sim.compute()
    pid.Kp = pid_sim.output['Kp']
    pid.Ki = pid_sim.output['Ki']
    pid.Kd = pid_sim.output['Kd']
    control_signal = pid.update(process_variable, dt)
    process_variable += control_signal * dt
    process_values.append(process_variable)
    setpoints.append(setpoint)

# Print final values
print(f"Optimized PID parameters: Kp={Kp_opt}, Ki={Ki_opt}, Kd={Kd_opt}")
print(f"Final setpoint: {setpoint}")
print(f"Final process value: {process_values[-1]}")

# Calculate settling time
tolerance = 0.05 * setpoint  # 5% tolerance
settling_time = None

for i in range(len(time)):
    if abs(process_values[i] - setpoint) <= tolerance:
        if all(abs(process_values[j] - setpoint) <= tolerance for j in range(i, len(time))):
            settling_time = time[i]
            break

if settling_time is not None:
    print(f"Settling time: {settling_time:.2f} seconds")
else:
    print("The process variable did not settle within the specified tolerance.")

plt.figure(figsize=(10, 5))
plt.plot(time, process_values, label='Process Value')
plt.plot(time, setpoints, label='Setpoint', linestyle='--')
plt.axhline(setpoint + tolerance, color='r', linestyle='--', label='Upper Tolerance')
plt.axhline(setpoint - tolerance, color='r', linestyle='--', label='Lower Tolerance')
plt.xlabel('Time (s)')
plt.ylabel('Value')
plt.title('Process Variable and Setpoint')
plt.legend()
plt.grid(True)
plt.show()
